{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-user/add-user.component.css","webpack:///./src/app/add-user/add-user.component.html","webpack:///./src/app/add-user/add-user.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/currentstock/currentstock.component.css","webpack:///./src/app/currentstock/currentstock.component.html","webpack:///./src/app/currentstock/currentstock.component.ts","webpack:///./src/app/edit-user/edit-user.component.css","webpack:///./src/app/edit-user/edit-user.component.html","webpack:///./src/app/edit-user/edit-user.component.ts","webpack:///./src/app/list-user/list-user.component.css","webpack:///./src/app/list-user/list-user.component.html","webpack:///./src/app/list-user/list-user.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/master/master.component.css","webpack:///./src/app/master/master.component.html","webpack:///./src/app/master/master.component.ts","webpack:///./src/app/model/Inventory.model.ts","webpack:///./src/app/model/Supplier.inventory.model.ts","webpack:///./src/app/model/Supplier.model.ts","webpack:///./src/app/service/auth.service.ts","webpack:///./src/app/service/inventory.service.ts","webpack:///./src/app/service/user.service.ts","webpack:///./src/app/supplierdetails/supplierdetails.component.css","webpack:///./src/app/supplierdetails/supplierdetails.component.html","webpack:///./src/app/supplierdetails/supplierdetails.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///./src/material-module.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkZC11c2VyL2FkZC11c2VyLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2 class=\\\"text-center\\\">Add User</h2>\\n  <form [formGroup]=\\\"addForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\">Email address:</label>\\n      <input type=\\\"email\\\" formControlName=\\\"email\\\" placeholder=\\\"Email\\\" name=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"firstName\\\">First Name:</label>\\n      <input formControlName=\\\"firstName\\\" placeholder=\\\"First Name\\\" name=\\\"firstName\\\" class=\\\"form-control\\\" id=\\\"firstName\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"lastName\\\">Last Name:</label>\\n      <input formControlName=\\\"lastName\\\" placeholder=\\\"Last name\\\" name=\\\"lastName\\\" class=\\\"form-control\\\" id=\\\"lastName\\\">\\n    </div>\\n\\n    <button class=\\\"btn btn-success\\\">Update</button>\\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {UserService} from '../service/user.service';\nimport {first} from 'rxjs/operators';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-add-user',\n  templateUrl: './add-user.component.html',\n  styleUrls: ['./add-user.component.css']\n})\nexport class AddUserComponent implements OnInit {\n\n  constructor(private formBuilder: FormBuilder, private router: Router, private userService: UserService) { }\n\n  addForm: FormGroup;\n\n  ngOnInit() {\n\n    this.addForm = this.formBuilder.group({\n      id: [],\n      email: ['', Validators.required],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required]\n    });\n\n  }\n\n  onSubmit() {\n    this.userService.createUser(this.addForm.value)\n      .subscribe( data => {\n        this.router.navigate(['list-user']);\n      });\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './login/login.component';\nimport {routing} from './app.routing';\nimport {AuthenticationService} from './service/auth.service';\nimport {ReactiveFormsModule, FormsModule} from '@angular/forms';\nimport {HttpClientModule} from '@angular/common/http';\nimport { AddUserComponent } from './add-user/add-user.component';\nimport { EditUserComponent } from './edit-user/edit-user.component';\nimport {ListUserComponent} from './list-user/list-user.component';\nimport {UserService} from './service/user.service';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { CurrentstockComponent } from './currentstock/currentstock.component';\nimport {\n  MatAutocompleteModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatNativeDateModule,\n  MatPaginatorModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatRadioModule,\n  MatRippleModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatTableModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatTooltipModule,\n  MatStepperModule,\n  MatDividerModule,\n} from '@angular/material';\nimport { DemoMaterialModule } from 'src/material-module';\nimport { MasterComponent } from './master/master.component';\nimport { InventoryService } from './service/inventory.service';\nimport { SupplierdetailsComponent } from './supplierdetails/supplierdetails.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    ListUserComponent,\n    AddUserComponent,\n    EditUserComponent,\n    CurrentstockComponent,\n    MasterComponent,\n    SupplierdetailsComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    routing,\n    ReactiveFormsModule,\n    HttpClientModule,\n    FormsModule,\n    MatAutocompleteModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatNativeDateModule,\n  MatPaginatorModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatRadioModule,\n  MatRippleModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatTableModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatTooltipModule,\n  MatStepperModule,\n  DemoMaterialModule,\n  MatDividerModule\n  ],\n  providers: [AuthenticationService, UserService, InventoryService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { RouterModule, Routes } from '@angular/router';\nimport {LoginComponent} from './login/login.component';\nimport {AddUserComponent} from './add-user/add-user.component';\nimport {ListUserComponent} from './list-user/list-user.component';\nimport {EditUserComponent} from './edit-user/edit-user.component';\nimport { CurrentstockComponent } from './currentstock/currentstock.component';\n\nconst routes: Routes = [\n  { path: 'login', component: LoginComponent },\n  { path: 'add-user', component: AddUserComponent },\n  { path: 'list-user', component: ListUserComponent },\n  { path: 'edit-user', component: EditUserComponent },\n  { path: 'inventorys', component: CurrentstockComponent },\n  { path : '', component : LoginComponent }\n];\n\nexport const routing = RouterModule.forRoot(routes);\n","module.exports = \".mat-tab-group {\\r\\n    margin-bottom: 48px;\\r\\n  }\\r\\n\\r\\n  /* .example-button-toggle-label {\\r\\n    display: inline-block;\\r\\n    margin: 16px;\\r\\n  } */\\r\\n\\r\\n  .mat-tab-group.mat-primary mat-tab-label-active{\\r\\n    background-color: red;\\r\\n  }\\r\\n\\r\\n  /* Structure */\\r\\n\\r\\n  .example-container {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  max-height: 500px;\\r\\n  min-width: 300px;\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n  .example-header {\\r\\n  min-height: 64px;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  padding-left: 24px;\\r\\n  font-size: 20px;\\r\\n}\\r\\n\\r\\n  .example-table {\\r\\n  overflow: auto;\\r\\n  min-height: 300px;\\r\\n}\\r\\n\\r\\n  .example-loading-shade {\\r\\n  position: absolute;\\r\\n  top: 0;\\r\\n  left: 0;\\r\\n  bottom: 56px;\\r\\n  right: 0;\\r\\n  background: rgba(0, 0, 0, 0.15);\\r\\n  z-index: 1;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n}\\r\\n\\r\\n  .example-rate-limit-reached {\\r\\n  color: #980000;\\r\\n  max-width: 360px;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n  /* Column Widths */\\r\\n\\r\\n  .mat-column-number,\\r\\n.mat-column-state {\\r\\n  max-width: 64px;\\r\\n}\\r\\n\\r\\n  .mat-column-created {\\r\\n  max-width: 124px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY3VycmVudHN0b2NrL2N1cnJlbnRzdG9jay5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksb0JBQW9CO0dBQ3JCOztFQUVEOzs7TUFHSTs7RUFFSjtJQUNFLHNCQUFzQjtHQUN2Qjs7RUFFRCxlQUFlOztFQUNqQjtFQUNFLGNBQWM7RUFDZCx1QkFBdUI7RUFDdkIsa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQixtQkFBbUI7Q0FDcEI7O0VBRUQ7RUFDRSxpQkFBaUI7RUFDakIsY0FBYztFQUNkLG9CQUFvQjtFQUNwQixtQkFBbUI7RUFDbkIsZ0JBQWdCO0NBQ2pCOztFQUVEO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtDQUNuQjs7RUFFRDtFQUNFLG1CQUFtQjtFQUNuQixPQUFPO0VBQ1AsUUFBUTtFQUNSLGFBQWE7RUFDYixTQUFTO0VBQ1QsZ0NBQWdDO0VBQ2hDLFdBQVc7RUFDWCxjQUFjO0VBQ2Qsb0JBQW9CO0VBQ3BCLHdCQUF3QjtDQUN6Qjs7RUFFRDtFQUNFLGVBQWU7RUFDZixpQkFBaUI7RUFDakIsbUJBQW1CO0NBQ3BCOztFQUVELG1CQUFtQjs7RUFDbkI7O0VBRUUsZ0JBQWdCO0NBQ2pCOztFQUVEO0VBQ0UsaUJBQWlCO0NBQ2xCIiwiZmlsZSI6InNyYy9hcHAvY3VycmVudHN0b2NrL2N1cnJlbnRzdG9jay5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLm1hdC10YWItZ3JvdXAge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDhweDtcclxuICB9XHJcblxyXG4gIC8qIC5leGFtcGxlLWJ1dHRvbi10b2dnbGUtbGFiZWwge1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgbWFyZ2luOiAxNnB4O1xyXG4gIH0gKi9cclxuXHJcbiAgLm1hdC10YWItZ3JvdXAubWF0LXByaW1hcnkgbWF0LXRhYi1sYWJlbC1hY3RpdmV7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XHJcbiAgfVxyXG5cclxuICAvKiBTdHJ1Y3R1cmUgKi9cclxuLmV4YW1wbGUtY29udGFpbmVyIHtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgbWF4LWhlaWdodDogNTAwcHg7XHJcbiAgbWluLXdpZHRoOiAzMDBweDtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuXHJcbi5leGFtcGxlLWhlYWRlciB7XHJcbiAgbWluLWhlaWdodDogNjRweDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgcGFkZGluZy1sZWZ0OiAyNHB4O1xyXG4gIGZvbnQtc2l6ZTogMjBweDtcclxufVxyXG5cclxuLmV4YW1wbGUtdGFibGUge1xyXG4gIG92ZXJmbG93OiBhdXRvO1xyXG4gIG1pbi1oZWlnaHQ6IDMwMHB4O1xyXG59XHJcblxyXG4uZXhhbXBsZS1sb2FkaW5nLXNoYWRlIHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgYm90dG9tOiA1NnB4O1xyXG4gIHJpZ2h0OiAwO1xyXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4xNSk7XHJcbiAgei1pbmRleDogMTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn1cclxuXHJcbi5leGFtcGxlLXJhdGUtbGltaXQtcmVhY2hlZCB7XHJcbiAgY29sb3I6ICM5ODAwMDA7XHJcbiAgbWF4LXdpZHRoOiAzNjBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi8qIENvbHVtbiBXaWR0aHMgKi9cclxuLm1hdC1jb2x1bW4tbnVtYmVyLFxyXG4ubWF0LWNvbHVtbi1zdGF0ZSB7XHJcbiAgbWF4LXdpZHRoOiA2NHB4O1xyXG59XHJcblxyXG4ubWF0LWNvbHVtbi1jcmVhdGVkIHtcclxuICBtYXgtd2lkdGg6IDEyNHB4O1xyXG59XHJcbiJdfQ== */\"","module.exports = \"<mat-toolbar color=\\\"primary\\\">    \\n    <!-- <div class=\\\"container\\\"> -->\\n    <!-- <div class=\\\"row\\\">\\n            <p class=\\\"text-center\\\">Inventory App</p>\\n            <p class=\\\"text-right\\\"> k.yallavula@gmail.com</p>\\n        </div> -->\\n    <!-- </div> -->\\n    <span>Bismi Traders</span>\\n\\n    <!-- This fills the remaining space of the current row -->\\n    <span class=\\\"fill-space\\\"></span>\\n  \\n    <!-- <span>Right Aligned Text</span> -->\\n  </mat-toolbar>\\n  <div class=\\\"basic-container\\\">\\n      \\n  </div>\\n  \\n<mat-tab-group [color]=\\\"white\\\" [backgroundColor]=\\\"blue\\\">\\n    <mat-tab label=\\\"Current Stock\\\" backgroundColor=\\\"blue\\\"> \\n        <div class=\\\"col-md-4\\\" style=\\\"margin-left: 30%;border-radius: 10px;border:solid 1px;margin-top: 20px\\\">\\n        <div class=\\\"row col-sm-15\\\">\\n            <div>\\n              <p class=\\\"text-center\\\" style=\\\"font-size: x-large;\\\">Current Stock <span [innerHTML]=\\\"totalRusk\\\"></span> KG</p>\\n              <!-- <p class=\\\"text-right\\\" style=\\\"font-size: x-large;\\\">{{totalRusk}} KG</p> -->\\n              <form [formGroup]=\\\"angForm\\\" (ngSubmit)=\\\"onSubmit(angForm)\\\">\\n                    <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                            <div class=\\\"row\\\">\\n                                <label for=\\\"formGroupArrivalDate\\\" class=\\\"col-sm-5 col-form-label\\\">Arrival Date</label>\\n                                <div class=\\\"col-sm-7\\\">\\n                                        <input type=\\\"date\\\" formControlName=\\\"formGroupArrivalDate\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupArrivalDate.errors }\\\" />\\n                                        <div *ngIf=\\\"submitted && f.formGroupArrivalDate.errors\\\" class=\\\"invalid-feedback\\\">\\n                                            <div *ngIf=\\\"f.formGroupArrivalDate.errors.required\\\">Arrival Date is required</div>\\n                                        </div>\\n                                </div>\\n                            </div>\\n                        </div>                 \\n                  <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                        <div class=\\\"row\\\">\\n                            <label for=\\\"formGroupTypeOfBox\\\" class=\\\"col-sm-5 col-form-label\\\">Type of Box</label>\\n                            <div class=\\\"col-sm-7\\\">\\n                                    <mat-form-field style=\\\"width: 98%;\\\">\\n                                            <mat-select formControlName=\\\"formGroupTypeOfBox\\\" required (selectionChange)=\\\"calculateTotalKG()\\\" >\\n                                              <mat-option *ngFor=\\\"let animal of animals\\\" [value]=\\\"animal.boxQuantity\\\">\\n                                                {{animal.boxQuantity}}\\n                                              </mat-option>\\n                                            </mat-select>\\n                                            <!-- <mat-error *ngIf=\\\"f.formGroupTypeOfBox.errors.required\\\">Please choose an animal</mat-error> -->\\n                                            <div *ngIf=\\\"submitted && f.formGroupTypeOfBox.errors\\\" class=\\\"invalid-feedback\\\">\\n                                                <div *ngIf=\\\"f.formGroupTypeOfBox.errors.required\\\">Type of Box is required</div>\\n                                            </div>\\n                                    </mat-form-field>\\n                            </div>\\n                        </div>\\n                    </div>\\n                 \\n                  <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                        <div class=\\\"row\\\">\\n                            <label for=\\\"formGroupNoOfBoxes\\\" class=\\\"col-sm-5 col-form-label\\\">No of Boxes</label>\\n                            <div class=\\\"col-sm-7\\\">\\n                                    <input type=\\\"text\\\" formControlName=\\\"formGroupNoOfBoxes\\\" (blur)=\\\"calculateTotalKG()\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupNoOfBoxes.errors }\\\" />\\n                                    <div *ngIf=\\\"submitted && f.formGroupNoOfBoxes.errors\\\" class=\\\"invalid-feedback\\\">\\n                                        <div *ngIf=\\\"f.formGroupNoOfBoxes.errors.required\\\">No of Boxes is required</div>                                        \\n                                    </div>\\n                            </div>\\n                        </div>\\n                    </div>\\n                 \\n                  <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                        <div class=\\\"row\\\">\\n                            <label for=\\\"formGroupTotalInKG\\\" class=\\\"col-sm-5 col-form-label\\\">Total Weight(KG)</label>\\n                            <div class=\\\"col-sm-7\\\">\\n                                    <input type=\\\"text\\\" readonly formControlName=\\\"formGroupTotalInKG\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupTotalInKG.errors }\\\" />\\n                                    <!-- <div *ngIf=\\\"submitted && f.formGroupTotalInKG.errors\\\" class=\\\"invalid-feedback\\\">\\n                                        <div *ngIf=\\\"f.formGroupTotalInKG.errors.required\\\">Total Weight(KG) is required</div>\\n                                    </div> -->\\n                            </div>\\n                        </div>\\n                    </div>  \\n                    <!-- <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                            <div class=\\\"row\\\">\\n                                <label for=\\\"formGroupTotalInKG\\\" class=\\\"col-sm-5 col-form-label\\\">Total Current Stock Weight(KG)</label>\\n                                <div class=\\\"col-sm-7\\\">\\n                                        <input type=\\\"text\\\"  [(ngModel)] = \\\"totalRusk\\\" readonly class=\\\"form-control\\\"/>\\n                                        <div *ngIf=\\\"submitted && f.formGroupTotalInKG.errors\\\" class=\\\"invalid-feedback\\\">\\n                                            <div *ngIf=\\\"f.formGroupTotalInKG.errors.required\\\">Total Weight(KG) is required</div>\\n                                        </div> \\n                                </div>\\n                            </div>\\n                        </div>                -->\\n                  <div class=\\\"form-group text-right col-sm-12\\\">\\n                      <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Save</button>\\n                  </div>\\n              </form>\\n          </div>\\n        </div>\\n        </div> \\n        <div>\\n                <!-- <hello name=\\\"{{ name }}\\\"></hello> -->\\n                <!-- <mat-divider></mat-divider> -->\\n                <mat-list>\\n                    <mat-list-item>\\n                            <mat-divider></mat-divider> \\n                    </mat-list-item>\\n                </mat-list>\\n                <!-- <mat-devider></mat-devider> -->\\n                <div class=\\\"example-container mat-elevation-z8\\\">\\n                  <mat-table #table [dataSource]=\\\"dataSource\\\">\\n                \\n                    <!--- Note that these columns can be defined in any order.\\n                          The actual rendered columns are set as a property on the row definition\\\" -->\\n                \\n                    <!-- Position Column -->\\n                    <ng-container matColumnDef=\\\"id\\\">\\n                      <mat-header-cell *matHeaderCellDef> No. </mat-header-cell>\\n                      <mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </mat-cell>\\n                    </ng-container>\\n                \\n                    <!-- Name Column -->\\n                    <ng-container matColumnDef=\\\"arrivalDate\\\">\\n                      <mat-header-cell *matHeaderCellDef> Arrival Date </mat-header-cell>\\n                      <mat-cell *matCellDef=\\\"let element\\\"> {{element.arrivalDate}} </mat-cell>\\n                    </ng-container>\\n                \\n                    <!-- Weight Column -->\\n                    <ng-container matColumnDef=\\\"typeOfBox\\\">\\n                      <mat-header-cell *matHeaderCellDef> Type of Box </mat-header-cell>\\n                      <mat-cell *matCellDef=\\\"let element\\\"> {{element.typeOfBox}} </mat-cell>\\n                    </ng-container>\\n                \\n                    <!-- Symbol Column -->\\n                    <ng-container matColumnDef=\\\"noofBoxes\\\">\\n                      <mat-header-cell *matHeaderCellDef> No of Boxes </mat-header-cell>\\n                      <mat-cell *matCellDef=\\\"let element\\\"> {{element.noofBoxes}} </mat-cell>\\n                    </ng-container>\\n\\n                    <ng-container matColumnDef=\\\"totalweight\\\">\\n                            <mat-header-cell *matHeaderCellDef> Total Weight(KG) </mat-header-cell>\\n                            <mat-cell *matCellDef=\\\"let element\\\"> {{element.totalweight}} </mat-cell>\\n                          </ng-container>\\n\\n                    \\n                \\n                    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\n                    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\n                  </mat-table>\\n                </div>\\n</div>\\n    </mat-tab>\\n    <mat-tab label=\\\"Sales\\\">            \\n        <app-master></app-master>\\n    </mat-tab>\\n    <mat-tab label=\\\"Master Screen\\\"> \\n        <app-supplierdetails></app-supplierdetails>           \\n    </mat-tab>\\n  </mat-tab-group>\\n  \\n\\n\\n<!-- <div class=\\\"container\\\" style=\\\"padding:20px;border-radius: 10px;border:solid 1px;margin-top: 20px;max-width: 800px;    background: silver;\\\">\\n    \\n<div class=\\\"row\\\">\\n  <div class=\\\"col-md-4 offset-md-3\\\">\\n      <p class=\\\"text-center\\\" style=\\\"font-size: x-large;\\\">Current Stock</p>\\n      <form [formGroup]=\\\"angForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n          <div class=\\\"form-group\\\">\\n              <label>Arrival Date</label>\\n              <input type=\\\"date\\\" formControlName=\\\"formGroupArrivalDate\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupArrivalDate.errors }\\\" />\\n              <div *ngIf=\\\"submitted && f.formGroupArrivalDate.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f.formGroupArrivalDate.errors.required\\\">Arrival Date is required</div>\\n              </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n              <label>Type of Box</label>\\n              <input type=\\\"text\\\" formControlName=\\\"formGroupTypeOfBox\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupTypeOfBox.errors }\\\" />\\n              <div *ngIf=\\\"submitted && f.formGroupTypeOfBox.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f.formGroupTypeOfBox.errors.required\\\">Type of Box is required</div>\\n              </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n              <label>No of Boxes</label>\\n              <input type=\\\"text\\\" formControlName=\\\"formGroupNoOfBoxes\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupNoOfBoxes.errors }\\\" />\\n              <div *ngIf=\\\"submitted && f.formGroupNoOfBoxes.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f.formGroupNoOfBoxes.errors.required\\\">No of Boxes is required</div>\\n                 \\n              </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n              <label>Total Weight(KG)</label>\\n              <input type=\\\"text\\\" formControlName=\\\"formGroupTotalInKG\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupTotalInKG.errors }\\\" />\\n              <div *ngIf=\\\"submitted && f.formGroupTotalInKG.errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"f.formGroupTotalInKG.errors.required\\\">Total Weight(KG) is required</div>\\n                  \\n              </div>\\n          </div>\\n          <div class=\\\"form-group text-right\\\">\\n              <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Save</button>\\n          </div>\\n      </form>\\n  </div>\\n</div>\\n</div> -->\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder, NgForm, AbstractControl } from '@angular/forms';\nimport { InventoryService } from '../service/inventory.service';\nimport { Inventory } from '../model/Inventory.model';\nimport { MatTableDataSource } from '@angular/material';\nimport { routerNgProbeToken } from '@angular/router/src/router_module';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nexport let browserRefresh = false;\n\n@Component({\n  selector: 'app-currentstock',\n  templateUrl: './currentstock.component.html',\n  styleUrls: ['./currentstock.component.css']\n})\nexport class CurrentstockComponent implements OnInit {\n\n  angForm: FormGroup;\n  submitted = false;\n  name = 'Angular';\n  animals: any[];\n  totalRusk: string;\n  displayedColumns = ['id', 'arrivalDate', 'typeOfBox', 'noofBoxes', 'totalweight'];\n  ELEMENT_DATA: Element[];\n dataSource = new MatTableDataSource<Element>(this.ELEMENT_DATA);\n subscription: Subscription;\n\n  constructor(private router: Router, private formBuilder: FormBuilder, private inventoryservice: InventoryService) {\n\n    this.subscription = router.events.subscribe((event) => {\n      if (event instanceof NavigationStart) {\n        browserRefresh = !router.navigated;\n      }\n  });\n\n   }\n\n  ngOnInit() {\n    this.angForm = this.formBuilder.group({\n      formGroupArrivalDate: ['', Validators.required],\n      formGroupTypeOfBox: ['', Validators.required],\n      formGroupNoOfBoxes: ['', Validators.required],\n      formGroupTotalInKG: ['', Validators.required],\n    });\n    this.inventoryservice.getAllModelTypes().subscribe( data => {\n      this.animals = JSON.parse(JSON.stringify(data));\n     });\n     this.inventoryservice.getTotalRuskStock().subscribe( data => {\n      // this.animals = JSON.parse(JSON.stringify(data));\n      const jsonData = JSON.parse(JSON.stringify(data));\n      this.totalRusk = jsonData.totalCurrentStcok;\n     });\n     this.inventoryservice.getAllInventory().subscribe( data => {\n      // this.animals = JSON.parse(JSON.stringify(data));\n      const jsonData = JSON.parse(JSON.stringify(data));\n      this.ELEMENT_DATA = jsonData;\n      this.dataSource = new MatTableDataSource<Element>(this.ELEMENT_DATA);\n     });\n    // this.animals = ['dog', 'cat', 'donkey', 'buffello', 'monkey'];\n    }\n    get f() { return this.angForm.controls; }\n    onSubmit(angForm: NgForm) {\n      this.submitted = true;\n\n      // stop here if form is invalid\n      if (this.angForm.invalid) {\n          return;\n      }\n      // alert('SUCCESS!! :-)');\n      // console.log('value' + angForm.controls);\n      const inventory = new Inventory();\n      inventory.arrivalDate = angForm.controls.formGroupArrivalDate.value;\n      inventory.typeOfBox = angForm.controls.formGroupTypeOfBox.value.split(' ')[0];\n      inventory.noofBoxes = angForm.controls.formGroupNoOfBoxes.value;\n      inventory.totalweight = angForm.controls.formGroupTotalInKG.value.split(' ')[0];\n      console.log('value' + JSON.stringify(inventory));\n      this.inventoryservice.createInventory(inventory).subscribe( data => {\n       alert('successfully saved the data');\n       this.angForm.reset();\n       let control: AbstractControl = null;\n       Object.keys(angForm.controls).forEach((name) => {\n        control = angForm.controls[name];\n        control.setErrors(null);\n        // this.router.navigate(['login']);\n      });\n      });\n      // this.inventoryservice.getAllInventory().subscribe( data => {\n      //   // this.animals = JSON.parse(JSON.stringify(data));\n      //   const jsonData = JSON.parse(JSON.stringify(data));\n      //   this.ELEMENT_DATA = jsonData;\n      //   this.dataSource = new MatTableDataSource<Element>(this.ELEMENT_DATA);\n      //  });\n    }\n    calculateTotalKG() {\n      if (!this.angForm.controls.formGroupNoOfBoxes && !this.angForm.controls.formGroupTypeOfBox ) {\n        return;\n      }\n     const typeOfBox = this.angForm.controls.formGroupTypeOfBox.value;\n     const noOfBoxes = this.angForm.controls.formGroupNoOfBoxes.value;\n     const boxweight = typeOfBox.split(' ');\n     const totalWeight = boxweight[0] * noOfBoxes;\n     console.log('totalWeight' + totalWeight);\n     this.angForm.controls.formGroupTotalInKG.setValue(totalWeight + ' KG');\n     this.totalRusk = (this.totalRusk + totalWeight);\n    }\n}\n\nexport interface Element {\n  id: number;\n  arrivalDate: string;\n  typeOfBox: string;\n  noofBoxes: string;\n  totalweight: string;\n}\n\n// const ELEMENT_DATA: Element[] = [\n//   {position: 1, name: 'Hydrogen', weight: 1.0079, symbol: 'H'},\n//   {position: 2, name: 'Helium', weight: 4.0026, symbol: 'He'},\n//   {position: 3, name: 'Lithium', weight: 6.941, symbol: 'Li'},\n//   {position: 4, name: 'Beryllium', weight: 9.0122, symbol: 'Be'},\n//   {position: 5, name: 'Boron', weight: 10.811, symbol: 'B'},\n//   {position: 6, name: 'Carbon', weight: 12.0107, symbol: 'C'},\n//   {position: 7, name: 'Nitrogen', weight: 14.0067, symbol: 'N'},\n//   {position: 8, name: 'Oxygen', weight: 15.9994, symbol: 'O'},\n//   {position: 9, name: 'Fluorine', weight: 18.9984, symbol: 'F'},\n//   {position: 10, name: 'Neon', weight: 20.1797, symbol: 'Ne'},\n//   {position: 11, name: 'Sodium', weight: 22.9897, symbol: 'Na'},\n//   {position: 12, name: 'Magnesium', weight: 24.305, symbol: 'Mg'},\n//   {position: 13, name: 'Aluminum', weight: 26.9815, symbol: 'Al'},\n//   {position: 14, name: 'Silicon', weight: 28.0855, symbol: 'Si'},\n//   {position: 15, name: 'Phosphorus', weight: 30.9738, symbol: 'P'},\n//   {position: 16, name: 'Sulfur', weight: 32.065, symbol: 'S'},\n//   {position: 17, name: 'Chlorine', weight: 35.453, symbol: 'Cl'},\n//   {position: 18, name: 'Argon', weight: 39.948, symbol: 'Ar'},\n//   {position: 19, name: 'Potassium', weight: 39.0983, symbol: 'K'},\n//   {position: 20, name: 'Calcium', weight: 40.078, symbol: 'Ca'},\n// ];\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2VkaXQtdXNlci9lZGl0LXVzZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2 class=\\\"text-center\\\">Edit User</h2>\\n  <form [formGroup]=\\\"editForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"email\\\">Email address:</label>\\n      <input type=\\\"email\\\" formControlName=\\\"email\\\" placeholder=\\\"Email\\\" name=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"firstName\\\">First Name:</label>\\n      <input formControlName=\\\"firstName\\\" placeholder=\\\"First Name\\\" name=\\\"firstName\\\" class=\\\"form-control\\\" id=\\\"firstName\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"lastName\\\">Last Name:</label>\\n      <input formControlName=\\\"lastName\\\" placeholder=\\\"Last name\\\" name=\\\"lastName\\\" class=\\\"form-control\\\" id=\\\"lastName\\\">\\n    </div>\\n\\n    <button class=\\\"btn btn-success\\\">Update</button>\\n  </form>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '../service/user.service';\nimport { Router } from '@angular/router';\nimport { User } from '../model/user.model';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-edit-user',\n  templateUrl: './edit-user.component.html',\n  styleUrls: ['./edit-user.component.css']\n})\nexport class EditUserComponent implements OnInit {\n\n  user: User;\n  editForm: FormGroup;\n  constructor(private formBuilder: FormBuilder, private router: Router, private userService: UserService) { }\n\n  ngOnInit() {\n    const userId = localStorage.getItem('editUserId');\n    if (!userId) {\n      alert('Invalid action.');\n      this.router.navigate(['list-user']);\n      return;\n    }\n    this.editForm = this.formBuilder.group({\n      id: [],\n      email: ['', Validators.required],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required]\n    });\n    this.userService.getUserById(+userId)\n      .subscribe(data => {\n        this.editForm.setValue(data);\n      });\n  }\n\n  onSubmit() {\n    this.userService.updateUser(this.editForm.value)\n      .pipe(first())\n      .subscribe(\n        data => {\n          this.router.navigate(['list-user']);\n        },\n        error => {\n          alert(error);\n        });\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2xpc3QtdXNlci9saXN0LXVzZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2> User Details</h2>\\n  <button class=\\\"btn btn-danger\\\" (click)=\\\"addUser()\\\"> Add User</button>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n    <tr>\\n      <th class=\\\"hidden\\\">Id</th>\\n      <th>FirstName</th>\\n      <th>LastName</th>\\n      <th>Email</th>\\n      <th>Action</th>\\n    </tr>\\n    </thead>\\n    <tbody>\\n    <tr *ngFor=\\\"let user of users\\\">\\n      <td class=\\\"hidden\\\">{{user.id}}</td>\\n      <td>{{user.firstName}}</td>\\n      <td>{{user.lastName}}</td>\\n      <td>{{user.email}}</td>\\n      <td><button class=\\\"btn btn-danger\\\" (click)=\\\"deleteUser(user)\\\"> Delete</button>\\n        <button class=\\\"btn btn-danger\\\" (click)=\\\"editUser(user)\\\" style=\\\"margin-left: 20px;\\\"> Edit</button></td>\\n    </tr>\\n    </tbody>\\n  </table>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {UserService} from '../service/user.service';\nimport {User} from '../model/user.model';\n\n@Component({\n  selector: 'app-list-user',\n  templateUrl: './list-user.component.html',\n  styleUrls: ['./list-user.component.css']\n})\nexport class ListUserComponent implements OnInit {\n\n  users: User[];\n\n  constructor(private router: Router, private userService: UserService) { }\n\n  ngOnInit() {\n    this.userService.getUsers()\n      .subscribe( data => {\n        this.users = data;\n      });\n  }\n\n  deleteUser(user: User): void {\n    this.userService.deleteUser(user.id)\n      .subscribe( data => {\n        this.users = this.users.filter(u => u !== user);\n      });\n  }\n\n  editUser(user: User): void {\n    localStorage.removeItem('editUserId');\n    localStorage.setItem('editUserId', user.id.toString());\n    this.router.navigate(['edit-user']);\n  }\n\n  addUser(): void {\n    this.router.navigate(['add-user']);\n  }\n}\n","module.exports = \".error{\\n  color: #FF0000;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGVBQWU7Q0FDaEIiLCJmaWxlIjoic3JjL2FwcC9sb2dpbi9sb2dpbi5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmVycm9ye1xuICBjb2xvcjogI0ZGMDAwMDtcbn1cbiJdfQ== */\"","module.exports = \"\\n<div class=\\\"h-100 col-md-4\\\" style=\\\"margin-left: 35%;margin-top:10%; border:teal solid 1px;border-radius: 20px; \\\">\\n<div class=\\\"row h-100 justify-content-center align-items-center\\\">\\n\\n  <div class=\\\"col-md-6 col-md-offset-2\\\">\\n    <h1>Login </h1>\\n    <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"email\\\">Email address:</label>\\n        <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" id=\\\"email\\\">\\n        <div *ngIf=\\\"submitted && loginForm.controls.email.errors\\\" class=\\\"error\\\">\\n          <div *ngIf=\\\"loginForm.controls.email.errors.required\\\">Email is required</div>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group\\\">\\n        <label for=\\\"pwd\\\">Password:</label>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" id=\\\"pwd\\\">\\n        <div *ngIf=\\\"submitted && loginForm.controls.password.errors\\\" class=\\\"error\\\">\\n          <div *ngIf=\\\"loginForm.controls.password.errors.required\\\">Password is required</div>\\n        </div>\\n      </div>\\n      <button class=\\\"btn btn-default\\\">Login</button>\\n      <div *ngIf=\\\"invalidLogin\\\" class=\\\"error\\\">\\n        <div>Invalid credentials.</div>\\n      </div>\\n    </form>\\n  </div>\\n</div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {Router} from '@angular/router';\nimport {first} from 'rxjs/operators';\nimport {AuthenticationService} from '../service/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  submitted = false;\n  invalidLogin = false;\n  constructor(private formBuilder: FormBuilder, private router: Router, private authService: AuthenticationService) { }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n    if (this.loginForm.controls.email.value === 'test' && this.loginForm.controls.password.value === 'test') {\n        this.router.navigate(['inventorys']);\n    } else {\n      this.invalidLogin = true;\n    }\n  }\n\n  ngOnInit() {\n    this.loginForm = this.formBuilder.group({\n      email: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21hc3Rlci9tYXN0ZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"col-md-4\\\" style=\\\"margin-left: 30%;border-radius: 10px;border:solid 1px;margin-top: 20px\\\">\\n    <div class=\\\"row col-sm-15\\\">\\n       \\n                \\n                    <!-- <div class=\\\"col-xs-3\\\">\\n                        <label for=\\\"class_type\\\"><h2><span class=\\\" label label-primary\\\">Class Type</span></h2></label>\\n                    </div>\\n                    <div class=\\\"col-xs-2\\\">\\n                        <select name=\\\"class_type\\\" id=\\\"class_type\\\" class=\\\"  form-control input-lg\\\" style=\\\"width:200px\\\" autocomplete=\\\"off\\\">\\n                            <option >Economy</option>\\n                            <option >Premium Economy</option>\\n                            <option >Club World</option>\\n                            <option >First Class</option>\\n                        </select>\\n                    </div> -->\\n                 \\n        <div>\\n          <p class=\\\"text-center\\\" style=\\\"font-size: x-large;\\\">Sales Info</p>\\n          <form [formGroup]=\\\"transactionForm\\\" (ngSubmit)=\\\"onSubmit(transactionForm)\\\">\\n                <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                        <div class=\\\"row\\\">\\n                            <label for=\\\"formGroupArrivalDate\\\" class=\\\"col-sm-5 col-form-label\\\">Sales Date</label>\\n                            <div class=\\\"col-sm-7\\\">\\n                                    <input type=\\\"date\\\" formControlName=\\\"formGroupArrivalDate\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupArrivalDate.errors }\\\" />\\n                                    <div *ngIf=\\\"submitted && f.formGroupArrivalDate.errors\\\" class=\\\"invalid-feedback\\\">\\n                                        <div *ngIf=\\\"f.formGroupArrivalDate.errors.required\\\">Arrival Date is required</div>\\n                                    </div>\\n                            </div>\\n                        </div>\\n                    </div>   \\n            <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                        <div class=\\\"row\\\">\\n                            <label for=\\\"formGroupArrivalDate\\\" class=\\\"col-sm-5 col-form-label\\\">Supplier Name</label>\\n                             \\n                            <div class=\\\"col-sm-7\\\">\\n                                    <mat-form-field style=\\\"width: 98%;\\\">\\n                                            <mat-select formControlName=\\\"supplierName\\\" required placeholder=\\\"Please select supplier\\\">\\n                                              <mat-option *ngFor=\\\"let supplier of suppliers\\\" [value]=\\\"supplier.id\\\">\\n                                                {{supplier.supplierName}}\\n                                              </mat-option>\\n                                            </mat-select>\\n                                            <!-- <mat-error *ngIf=\\\"f.formGroupTypeOfBox.errors.required\\\">Please choose an animal</mat-error> -->\\n                                            <div *ngIf=\\\"submitted && f.supplierName.errors\\\" class=\\\"invalid-feedback\\\">\\n                                                <div *ngIf=\\\"f.supplierName.errors.required\\\">Type of Box is required</div>\\n                                            </div>\\n                                    </mat-form-field>\\n                                \\n                            </div>\\n                        </div>\\n                    </div>\\n              <!-- <div class=\\\"form-group\\\">\\n                  <label>Arrival Date</label>\\n                  <input type=\\\"date\\\" formControlName=\\\"formGroupArrivalDate\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupArrivalDate.errors }\\\" />\\n                  <div *ngIf=\\\"submitted && f.formGroupArrivalDate.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.formGroupArrivalDate.errors.required\\\">Arrival Date is required</div>\\n                  </div>\\n              </div> -->\\n              <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                    <div class=\\\"row\\\">\\n                        <label for=\\\"formGroupTypeOfBox\\\" class=\\\"col-sm-5 col-form-label\\\">Type of Box</label>\\n                        <div class=\\\"col-sm-7\\\">\\n                                <mat-form-field style=\\\"width: 98%;\\\">\\n                                        <mat-select (selectionChange)=\\\"calculateTotalKG()\\\" formControlName=\\\"formGroupTypeOfBox\\\" required placeholder=\\\"Please select type of BOX\\\">\\n                                          <mat-option *ngFor=\\\"let animal of animals\\\" [value]=\\\"animal.boxQuantity\\\">\\n                                            {{animal.boxQuantity}}\\n                                          </mat-option>\\n                                        </mat-select>\\n                                        <!-- <mat-error *ngIf=\\\"f.formGroupTypeOfBox.errors.required\\\">Please choose an animal</mat-error> -->\\n                                        <div *ngIf=\\\"submitted && f.formGroupTypeOfBox.errors\\\" class=\\\"invalid-feedback\\\">\\n                                            <div *ngIf=\\\"f.formGroupTypeOfBox.errors.required\\\">Type of Box is required</div>\\n                                        </div>\\n                                </mat-form-field>\\n                        </div>\\n                    </div>\\n                </div>\\n              <!-- <div class=\\\"form-group\\\">\\n                  <label>Type of Box</label>\\n                 \\n                  <mat-form-field style=\\\"width: 235px;\\\">\\n                    <mat-select formControlName=\\\"formGroupTypeOfBox\\\" required>\\n                      <mat-option *ngFor=\\\"let animal of animals\\\" [value]=\\\"animal\\\">\\n                        {{animal}}\\n                      </mat-option>\\n                    </mat-select>\\n                    <mat-error *ngIf=\\\"f.formGroupTypeOfBox.errors.required\\\">Please choose an animal</mat-error>\\n                    <div *ngIf=\\\"submitted && f.formGroupTypeOfBox.errors\\\" class=\\\"invalid-feedback\\\">\\n                        <div *ngIf=\\\"f.formGroupTypeOfBox.errors.required\\\">Type of Box is required</div>\\n                    </div>\\n                  </mat-form-field>\\n              </div> -->\\n              <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                    <div class=\\\"row\\\">\\n                        <label for=\\\"formGroupNoOfBoxes\\\" class=\\\"col-sm-5 col-form-label\\\">No of Boxes</label>\\n                        <div class=\\\"col-sm-7\\\">\\n                                <input type=\\\"text\\\" (blur)=\\\"calculateTotalKG()\\\" formControlName=\\\"formGroupNoOfBoxes\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupNoOfBoxes.errors }\\\" />\\n                                <div *ngIf=\\\"submitted && f.formGroupNoOfBoxes.errors\\\" class=\\\"invalid-feedback\\\">\\n                                    <div *ngIf=\\\"f.formGroupNoOfBoxes.errors.required\\\">No of Boxes is required</div>                                        \\n                                </div>\\n                        </div>\\n                    </div>\\n                </div>\\n              <!-- <div class=\\\"form-group\\\">\\n                  <label>No of Boxes</label>\\n                  <input type=\\\"text\\\" formControlName=\\\"formGroupNoOfBoxes\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupNoOfBoxes.errors }\\\" />\\n                  <div *ngIf=\\\"submitted && f.formGroupNoOfBoxes.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.formGroupNoOfBoxes.errors.required\\\">No of Boxes is required</div>\\n                     \\n                  </div>\\n              </div> -->\\n              <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                    <div class=\\\"row\\\">\\n                        <label for=\\\"formGroupTotalInKG\\\" class=\\\"col-sm-5 col-form-label\\\">Total Weight(KG)</label>\\n                        <div class=\\\"col-sm-7\\\">\\n                                <input type=\\\"text\\\" readonly formControlName=\\\"formGroupTotalInKG\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupTotalInKG.errors }\\\" />\\n                                <div *ngIf=\\\"submitted && f.formGroupTotalInKG.errors\\\" class=\\\"invalid-feedback\\\">\\n                                    <div *ngIf=\\\"f.formGroupTotalInKG.errors.required\\\">Total Weight(KG) is required</div>\\n                                </div>\\n                        </div>\\n                    </div>\\n                </div>\\n              <!-- <div class=\\\"form-group\\\">\\n                  <label>Total Weight(KG)</label>\\n                  <input type=\\\"text\\\" formControlName=\\\"formGroupTotalInKG\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupTotalInKG.errors }\\\" />\\n                  <div *ngIf=\\\"submitted && f.formGroupTotalInKG.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f.formGroupTotalInKG.errors.required\\\">Total Weight(KG) is required</div>\\n                      \\n                  </div>\\n              </div> -->\\n              <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                  <div class=\\\"row\\\">\\n                      <label for=\\\"formGroupTotalInKG\\\" class=\\\"col-sm-5 col-form-label\\\">Total Amount (INR)</label>\\n                      <div class=\\\"col-sm-7\\\">\\n                              <input type=\\\"text\\\" formControlName=\\\"formGroupTotalAmount\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupTotalAmount.errors }\\\" />\\n                              <div *ngIf=\\\"submitted && f.formGroupTotalInKG.errors\\\" class=\\\"invalid-feedback\\\">\\n                                  <div *ngIf=\\\"f.formGroupTotalAmount.errors.required\\\">Total Amount (INR) is required</div>\\n                              </div>\\n                      </div>\\n                  </div>\\n              </div>\\n              <div class=\\\"form-group text-right col-sm-12\\\">\\n                  <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Save</button>\\n              </div>\\n          </form>\\n      </div>\\n    </div>\\n    </div> \"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, Validators, FormBuilder, NgForm, AbstractControl } from '@angular/forms';\nimport { InventoryService } from '../service/inventory.service';\nimport { SupplierInventory } from '../model/Supplier.inventory.model';\nimport { Subscription } from 'rxjs';\nimport { NavigationStart, Router } from '@angular/router';\n\nexport let browserRefresh = false;\n\n@Component({\n  selector: 'app-master',\n  templateUrl: './master.component.html',\n  styleUrls: ['./master.component.css']\n})\nexport class MasterComponent implements OnInit {\nsample: string;\ntransactionForm: FormGroup;\nanimals: any[];\nsuppliers: any[];\nsubmitted = false;\nsubscription: Subscription;\n\nconstructor(private router: Router, private formBuilder: FormBuilder, private inventoryservice: InventoryService) {\n  this.subscription = router.events.subscribe((event) => {\n    if (event instanceof NavigationStart) {\n      browserRefresh = !router.navigated;\n    }\n});\n}\n\n  ngOnInit() {\n    this.sample = 'konda app';\n    this.transactionForm = this.formBuilder.group({\n      formGroupArrivalDate: ['', Validators.required],\n      supplierName: ['', Validators.required],\n      formGroupTypeOfBox: ['', Validators.required],\n      formGroupNoOfBoxes: ['', Validators.required],\n      formGroupTotalInKG: [''],\n      formGroupTotalAmount: ['', Validators.required],\n    });\n    this.inventoryservice.getAllModelTypes().subscribe( data => {\n      this.animals = JSON.parse(JSON.stringify(data));\n      console.log('data from modelbox' + JSON.stringify(data));\n     });\n     this.inventoryservice.getAllSuppliers().subscribe( data => {\n      this.suppliers = JSON.parse(JSON.stringify(data));\n      console.log('data from modelbox' + JSON.stringify(data));\n     });\n  }\n\n  get f() { return this.transactionForm.controls; }\n    onSubmit(transactionForm: NgForm) {\n      this.submitted = true;\n\n      // stop here if form is invalid\n      if (this.transactionForm.invalid) {\n          return;\n      }\n      // alert('SUCCESS!! :-)');\n      console.log('value' + this.transactionForm.controls);\n      const supplierInventory = new SupplierInventory();\n      supplierInventory.arrivalDate = transactionForm.controls.formGroupArrivalDate.value;\n      supplierInventory.supplierId = transactionForm.controls.supplierName.value;\n      supplierInventory.typeOfBox = transactionForm.controls.formGroupTypeOfBox.value.split(' ')[0];\n      supplierInventory.noofBoxes = transactionForm.controls.formGroupNoOfBoxes.value;\n      supplierInventory.totalweight = transactionForm.controls.formGroupTotalInKG.value.split(' ')[0];\n      supplierInventory.totalAmount = transactionForm.controls.formGroupTotalAmount.value;\n      this.inventoryservice.saveSupplierInventory(supplierInventory).subscribe( data => {\n       alert('successfully saved the data');\n       transactionForm.reset();\n       let control: AbstractControl = null;\n       Object.keys(transactionForm.controls).forEach((name) => {\n        control = transactionForm.controls[name];\n        control.setErrors(null);\n        // this.router.navigate(['login']);\n      });\n      });\n    }\n    calculateTotalKG() {\n      if (!this.transactionForm.controls.formGroupNoOfBoxes && !this.transactionForm.controls.formGroupTypeOfBox ) {\n        return;\n      }\n     const typeOfBox = this.transactionForm.controls.formGroupTypeOfBox.value;\n     const noOfBoxes = this.transactionForm.controls.formGroupNoOfBoxes.value;\n     const boxweight = typeOfBox.split(' ');\n     const totalWeight = boxweight[0] * noOfBoxes;\n     console.log('totalWeight' + totalWeight);\n     this.transactionForm.controls.formGroupTotalInKG.setValue(totalWeight + ' KG');\n    //  this.totalRusk = (this.totalRusk + totalWeight);\n    }\n\n}\n","export class Inventory {\r\n    id: number;\r\n    arrivalDate: string;\r\n    typeOfBox: string;\r\n    noofBoxes: string;\r\n    totalweight: string;\r\n  }\r\n","export class SupplierInventory {\r\n  id: number;\r\n  supplierId: number;\r\n  arrivalDate: string;\r\n  typeOfBox: string;\r\n  noofBoxes: string;\r\n  totalweight: string;\r\n  totalAmount: string;\r\n  }\r\n","export class Supplier {\r\n    id: number;\r\n    supplierName: string;\r\n    supplierAddress: string;\r\n  }\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(private http: HttpClient) {\n  }\n\n  login(username: string, password: string) {\n    return this.http.post<any>('/api/authenticate', {username: username, password: password})\n      .pipe(map(user => {\n        // login successful if there's a jwt token in the response\n        if (user && user.token) {\n          // store user details and jwt token in local storage to keep user logged in between page refreshes\n          localStorage.setItem('currentUser', JSON.stringify(user));\n        }\n\n        return user;\n      }));\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {User} from '../model/user.model';\r\nimport { Inventory } from '../model/Inventory.model';\r\nimport { Supplier } from '../model/Supplier.model';\r\nimport { SupplierInventory } from '../model/Supplier.inventory.model';\r\n\r\n@Injectable()\r\nexport class InventoryService {\r\n  constructor(private http: HttpClient) { }\r\n  baseUrl = 'http://localhost/inventory';\r\n\r\n  getUsers() {\r\n    /* let fakeUsers = [{id: 1, firstName: 'Dhiraj', lastName: 'Ray', email: 'dhiraj@gmail.com'},\r\n     {id: 1, firstName: 'Tom', lastName: 'Jac', email: 'Tom@gmail.com'},\r\n     {id: 1, firstName: 'Hary', lastName: 'Pan', email: 'hary@gmail.com'},\r\n     {id: 1, firstName: 'praks', lastName: 'pb', email: 'praks@gmail.com'},\r\n   ];\r\n   return Observable.of(fakeUsers).delay(5000);*/\r\n    return this.http.get<User[]>(this.baseUrl);\r\n  }\r\n\r\n  getUserById(id: number) {\r\n    return this.http.get<User>(this.baseUrl + '/' + id);\r\n  }\r\n\r\n  createInventory(inventory: Inventory) {\r\n    return this.http.post(this.baseUrl + '/create', inventory);\r\n  }\r\n\r\n  saveSupplier(supplier: Supplier) {\r\n    return this.http.post(this.baseUrl + '/saveSupplier', supplier);\r\n  }\r\n\r\n  saveSupplierInventory(supplierInventory: SupplierInventory) {\r\n    return this.http.post(this.baseUrl + '/saveSupplierInventory', supplierInventory);\r\n  }\r\n\r\n  getAllSuppliers() {\r\n    return this.http.get(this.baseUrl + '/getAllSuppliers');\r\n  }\r\n\r\n  updateUser(user: User) {\r\n    return this.http.put(this.baseUrl + '/' + user.id, user);\r\n  }\r\n\r\n  deleteUser(id: number) {\r\n    return this.http.delete(this.baseUrl + '/' + id);\r\n  }\r\n\r\n  getAllModelTypes() {\r\n    return this.http.get(this.baseUrl + '/getAllModelTypes');\r\n  }\r\n\r\n  getTotalRuskStock() {\r\n    return this.http.get(this.baseUrl + '/getTotalRusk');\r\n  }\r\n  getAllInventory() {\r\n    return this.http.get(this.baseUrl + '/getAllInventory');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {User} from '../model/user.model';\n\n@Injectable()\nexport class UserService {\n  constructor(private http: HttpClient) { }\n  baseUrl = 'http://localhost:80/user-portal/users';\n\n  getUsers() {\n    /* let fakeUsers = [{id: 1, firstName: 'Dhiraj', lastName: 'Ray', email: 'dhiraj@gmail.com'},\n     {id: 1, firstName: 'Tom', lastName: 'Jac', email: 'Tom@gmail.com'},\n     {id: 1, firstName: 'Hary', lastName: 'Pan', email: 'hary@gmail.com'},\n     {id: 1, firstName: 'praks', lastName: 'pb', email: 'praks@gmail.com'},\n   ];\n   return Observable.of(fakeUsers).delay(5000);*/\n    return this.http.get<User[]>(this.baseUrl);\n  }\n\n  getUserById(id: number) {\n    return this.http.get<User>(this.baseUrl + '/' + id);\n  }\n\n  createUser(user: User) {\n    return this.http.post(this.baseUrl, user);\n  }\n\n  updateUser(user: User) {\n    return this.http.put(this.baseUrl + '/' + user.id, user);\n  }\n\n  deleteUser(id: number) {\n    return this.http.delete(this.baseUrl + '/' + id);\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3N1cHBsaWVyZGV0YWlscy9zdXBwbGllcmRldGFpbHMuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"col-md-4\\\" style=\\\"margin-left: 30%;border-radius: 10px;border:solid 1px;margin-top: 20px\\\">\\n        <div class=\\\"row col-sm-15\\\">\\n            <div>\\n              <p class=\\\"text-center\\\" style=\\\"font-size: x-large;\\\">Register Supplier</p>\\n              <form [formGroup]=\\\"supplierForm\\\" (ngSubmit)=\\\"onSubmit(supplierForm)\\\">\\n                    <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                            <div class=\\\"row\\\">\\n                                <label for=\\\"supplierName\\\" class=\\\"col-sm-5 col-form-label\\\">Supplier Name</label>\\n                                <div class=\\\"col-sm-7\\\">\\n                                        <input type=\\\"text\\\" formControlName=\\\"supplierName\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.supplierName.errors }\\\" />\\n                                        <div *ngIf=\\\"submitted && f.supplierName.errors\\\" class=\\\"invalid-feedback\\\">\\n                                            <div *ngIf=\\\"f.supplierName.errors.required\\\">Supplier Name is required</div>\\n                                        </div>\\n                                </div>\\n                            </div>\\n                        </div>                 \\n                  <!-- <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                        <div class=\\\"row\\\">\\n                            <label for=\\\"formGroupTypeOfBox\\\" class=\\\"col-sm-5 col-form-label\\\">Type of Box</label>\\n                            <div class=\\\"col-sm-7\\\">\\n                                    <mat-form-field style=\\\"width: 98%;\\\">\\n                                            <mat-select formControlName=\\\"formGroupTypeOfBox\\\" required>\\n                                              <mat-option *ngFor=\\\"let animal of animals\\\" [value]=\\\"animal.id\\\">\\n                                                {{animal.boxQuantity}}\\n                                              </mat-option>\\n                                            </mat-select>-->\\n                                            <!-- <mat-error *ngIf=\\\"f.formGroupTypeOfBox.errors.required\\\">Please choose an animal</mat-error> \\n                                            <div *ngIf=\\\"submitted && f.formGroupTypeOfBox.errors\\\" class=\\\"invalid-feedback\\\">\\n                                                <div *ngIf=\\\"f.formGroupTypeOfBox.errors.required\\\">Type of Box is required</div>\\n                                            </div>\\n                                    </mat-form-field>\\n                            </div>\\n                        </div>\\n                    </div> -->\\n                 \\n                  <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                        <div class=\\\"row\\\">\\n                            <label for=\\\"supplierAddress\\\" class=\\\"col-sm-5 col-form-label\\\">Supplier Address</label>\\n                            <div class=\\\"col-sm-7\\\">\\n                                    <!-- <input type=\\\"textarea\\\" formControlName=\\\"formGroupNoOfBoxes\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupNoOfBoxes.errors }\\\" />\\n                                    <div *ngIf=\\\"submitted && f.formGroupNoOfBoxes.errors\\\" class=\\\"invalid-feedback\\\">\\n                                        <div *ngIf=\\\"f.formGroupNoOfBoxes.errors.required\\\">No of Boxes is required</div>                                        \\n                                    </div> -->\\n                                    <mat-form-field>\\n                                            <textarea matInput \\n                                                placeholder=\\\"supplierAddress\\\" \\n                                                formControlName=\\\"supplierAddress\\\">\\n                                            </textarea>\\n                                    </mat-form-field>\\n                            </div>\\n                        </div>\\n                    </div>\\n                 \\n                  <!-- <div class=\\\"form-group form-group-sm col-sm-12\\\">\\n                        <div class=\\\"row\\\">\\n                            <label for=\\\"formGroupTotalInKG\\\" class=\\\"col-sm-5 col-form-label\\\">Total Weight(KG)</label>\\n                            <div class=\\\"col-sm-7\\\">\\n                                    <input type=\\\"text\\\" readonly formControlName=\\\"formGroupTotalInKG\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.formGroupTotalInKG.errors }\\\" />\\n                                    <div *ngIf=\\\"submitted && f.formGroupTotalInKG.errors\\\" class=\\\"invalid-feedback\\\">\\n                                        <div *ngIf=\\\"f.formGroupTotalInKG.errors.required\\\">Total Weight(KG) is required</div>\\n                                    </div>\\n                            </div>\\n                        </div>\\n                    </div>                 -->\\n                  <div class=\\\"form-group text-right col-sm-12\\\">\\n                      <button [disabled]=\\\"loading\\\" class=\\\"btn btn-primary\\\">Save Supplier</button>\\n                  </div>\\n              </form>\\n          </div>\\n        </div>\\n        </div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, NgForm, AbstractControl } from '@angular/forms';\nimport { InventoryService } from '../service/inventory.service';\nimport { Supplier } from '../model/Supplier.model';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Subscription } from 'rxjs';\n\nexport let browserRefresh = false;\n\n@Component({\n  selector: 'app-supplierdetails',\n  templateUrl: './supplierdetails.component.html',\n  styleUrls: ['./supplierdetails.component.css']\n})\nexport class SupplierdetailsComponent implements OnInit {\n\n  supplierForm: FormGroup;\n  submitted = false;\n  name = 'Angular';\n  animals: any[];\n  subscription: Subscription;\n\n  constructor(private router: Router, private formBuilder: FormBuilder, private inventoryservice: InventoryService) {\n    this.subscription = router.events.subscribe((event) => {\n      if (event instanceof NavigationStart) {\n        browserRefresh = !router.navigated;\n      }\n  });\n\n   }\n\n  ngOnInit() {\n    this.supplierForm = this.formBuilder.group({\n      supplierName: ['', Validators.required],\n      supplierAddress: ['', Validators.required]\n    });\n    this.inventoryservice.getAllModelTypes().subscribe( data => {\n      this.animals = JSON.parse(JSON.stringify(data));\n      console.log('data from modelbox' + JSON.stringify(data));\n     });\n  }\n  get f() { return this.supplierForm.controls; }\n    onSubmit(supplierForm: NgForm) {\n      this.submitted = true;\n\n      // stop here if form is invalid\n      if (this.supplierForm.invalid) {\n          return;\n      }\n      // alert('SUCCESS!! :-)');\n      // console.log('value' + angForm.controls);\n      const supplier = new Supplier();\n      supplier.supplierName =  supplierForm.controls.supplierName.value;\n      supplier.supplierAddress =  supplierForm.controls.supplierAddress.value;\n      console.log('value' + JSON.stringify(supplier));\n      this.inventoryservice.saveSupplier(supplier).subscribe( data => {\n       alert('successfully saved the data');\n      //  supplierForm.resetForm();\n       supplierForm.reset();\n       let control: AbstractControl = null;\n       Object.keys(supplierForm.controls).forEach((name) => {\n        control = supplierForm.controls[name];\n        control.setErrors(null);\n        // this.router.navigate(['login']);\n      });\n      //  supplierForm.controls.supplierAddress.setValue('');\n      //  supplierForm.controls.supplierAddress.value = '';\n      // this.router.navigate(['inventory']);\n      });\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","import {A11yModule} from '@angular/cdk/a11y';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {CdkStepperModule} from '@angular/cdk/stepper';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {CdkTreeModule} from '@angular/cdk/tree';\r\nimport {NgModule} from '@angular/core';\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatBadgeModule,\r\n  MatBottomSheetModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatDatepickerModule,\r\n  MatDialogModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatGridListModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatNativeDateModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatRadioModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatStepperModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatTooltipModule,\r\n  MatTreeModule,\r\n} from '@angular/material';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class DemoMaterialModule {}\r\n\r\n\r\n/**  Copyright 2018 Google Inc. All Rights Reserved.\r\n    Use of this source code is governed by an MIT-style license that\r\n    can be found in the LICENSE file at http://angular.io/license */\r\n"],"sourceRoot":""}